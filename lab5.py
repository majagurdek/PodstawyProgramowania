# -*- coding: utf-8 -*-
"""Lab5.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16Q8e6lVC1nAwrYD-Wv91iAoBR8axwtjv
"""

from sklearn import datasets
data_breast_cancer = datasets.load_breast_cancer(as_frame=True) 
print(data_breast_cancer['DESCR'])

X_bc = data_breast_cancer["data"][["mean texture", "mean symmetry"]]
y_bc = data_breast_cancer["target"]
X_bc

import numpy as np
import pandas as pd
size = 300
X = np.random.rand(size)*5-2.5
w4, w3, w2, w1, w0 = 1, 2, 1, -4, 2
y = w4*(X**4) + w3*(X**3) + w2*(X**2) + w1*X + w0 + np.random.randn(size)*8-4 
df = pd.DataFrame({'x': X, 'y': y})
df.plot.scatter(x='x',y='y')

from sklearn.model_selection import train_test_split
X_bc_train, X_bc_test, y_bc_train, y_bc_test = train_test_split(X_bc, y_bc, test_size=0.2)

from sklearn.tree import DecisionTreeClassifier

from sklearn.metrics import f1_score

# f1s = []
# for i in range(1, 20):
#     tree_clf = DecisionTreeClassifier(max_depth=i,random_state=42)
#     tree_clf.fit(X_bc_train, y_bc_train)
#     y_pred_train = tree_clf.predict(X_bc_train) 
#     y_pred_test = tree_clf.predict(X_bc_test)
#     f1_train = f1_score(y_bc_train, y_pred_train)
#     f1_test = f1_score(y_bc_test, y_pred_test)
#     f1s.append((i, f1_train, f1_test))
# f1s
# 3 najlepsze

tree_clf = DecisionTreeClassifier(max_depth=3,random_state=42)
tree_clf.fit(X_bc_train, y_bc_train)
y_pred_train = tree_clf.predict(X_bc_train) 
y_pred_test = tree_clf.predict(X_bc_test)
f1_train = f1_score(y_bc_train, y_pred_train)
f1_test = f1_score(y_bc_test, y_pred_test)

print(f1_train)
print(f1_test)

from sklearn.tree import export_graphviz
import graphviz
f = "bc"
export_graphviz(
        tree_clf,
        out_file=f,
        feature_names=data_breast_cancer.feature_names[[1, 8]],
        class_names=[str(num)+", "+name
                     for num,name in
                     zip(set(data_breast_cancer.target),data_breast_cancer.target_names)],
        rounded=True,
        filled=True) 
print(f)

print(graphviz.render('dot', 'png', f))

acc_train = tree_clf.score(X_bc_train, y_bc_train)
acc_test = tree_clf.score(X_bc_test, y_bc_test)

print(acc_train, acc_test)

import pickle
f1acc_tree = [tree_clf.get_depth(),f1_train, f1_test,acc_train, acc_test]

with open('f1acc_tree.pkl', 'wb') as f:
    pickle.dump(f1acc_tree, f, pickle.HIGHEST_PROTOCOL)

with open('f1acc_tree.pkl', 'rb') as f:
    print(pickle.load(f))

#Regresja

from sklearn.tree import DecisionTreeRegressor

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)

from sklearn.metrics import mean_squared_error

X_train= X_train.reshape(-1, 1)
y_train= y_train.reshape(-1, 1)
X_test = X_test.reshape(-1, 1)
y_test = y_test.reshape(-1, 1)

# res= []
# for i in range(1, 20):
#     tree_reg = DecisionTreeRegressor(max_depth=i,random_state=42)
#     tree_reg.fit(X_train, y_train)
#     y_pred_train = tree_reg.predict(X_train) 
#     y_pred_test = tree_reg.predict(X_test)
#     mse_train = mean_squared_error(y_train, y_pred_train)
#     mse_test = mean_squared_error(y_test, y_pred_test)
#     res.append((i, mse_train, mse_test))
# res
# 4 najlepszy

tree_reg = DecisionTreeRegressor(max_depth=4,random_state=42)
tree_reg.fit(X_train, y_train)
y_pred_train = tree_reg.predict(X_train) 
y_pred_test = tree_reg.predict(X_test)
mse_train = mean_squared_error(y_train, y_pred_train)
mse_test = mean_squared_error(y_test, y_pred_test)

print(mse_train)
print(mse_test)

f = "reg"
export_graphviz(
        tree_reg,
        out_file=f,
        rounded=True,
        filled=True) 
print(f)

print(graphviz.render('dot', 'png', f))

mse_tree = [tree_reg.get_depth(),mse_train, mse_test]

with open('mse_tree.pkl', 'wb') as f:
    pickle.dump(mse_tree, f, pickle.HIGHEST_PROTOCOL)

with open('mse_tree.pkl', 'rb') as f:
    print(pickle.load(f))

